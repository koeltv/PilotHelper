services:
  ############################
  # Infrastructures services #
  ############################

  # Keycloak database
  keycloak-database:
    image: bitnami/postgresql
    volumes:
      - keycloak_database:/bitnami/postgresql
    env_file:
      - keycloak-database.env

  # Keycloak : Authentification & Authorization
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.0
    command: start --import-realm
    env_file:
      - keycloak-database.env
      - keycloak-url.env
      - keycloak.env
    volumes:
      - ./authentification:/opt/keycloak/data/import:ro
    depends_on:
      - keycloak-database
    labels:
      traefik.enable: true
      traefik.http.routers.keycloak.rule: Host(`keycloak.pilothelper.com`)
      traefik.http.routers.keycloak.entrypoints: https,http
      traefik.http.routers.keycloak.tls: true

  # Node exporter : Collect metrics on host system
  node-exporter:
    image: prom/node-exporter:v1.8.1
    restart: unless-stopped
    command: --path.rootfs=/host
    volumes:
      - /:/host:ro

  # Traefik : Reverse proxy
  traefik:
    restart: on-failure
    image: traefik
    ports:
      - "${PROXY_PORT:-80}:80"
      - "${HTTPS_PROXY_PORT:-443}:443"
      - 8081:8080 # For admin interface
    env_file:
      - keycloak-shared.env
      - keycloak-url.env
    volumes:
      - ./reverse-proxy/traefik.yml/:/etc/traefik/traefik.yml:ro
      - ./reverse-proxy/dynamic.yml/:/etc/traefik/dynamic.yml:ro
      - ./reverse-proxy/certs/_wildcard.pilothelper.com.pem:/etc/ssl/certs/_wildcard.pilothelper.com.pem:ro
      - ./reverse-proxy/certs/_wildcard.pilothelper.com-key.pem:/etc/ssl/certs/_wildcard.pilothelper.com-key.pem:ro
      - ./reverse-proxy/certs:/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # Prometheus : Metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    volumes:
      - ./metrics/prometheus:/etc/prometheus:ro

  # Promtail : Gather logs and send them to Loki
  promtail:
    image: grafana/promtail
    command: -config.file=/etc/promtail/promtail-config.yaml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs/promtail-config.yaml:/etc/promtail/promtail-config.yaml:ro
    restart: always

  # Loki : Like Prometheus, but for logs
  loki:
    image: grafana/loki
    restart: always

  # Grafana : Dashboards for metrics, logs & more
  grafana:
    image: grafana/grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    env_file:
      - grafana.env
    volumes:
      - ./metrics/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./metrics/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./metrics/grafana/dashboards:/etc/grafana/dashboards:ro
    labels:
      traefik.enable: true
      traefik.http.routers.grafana.rule: PathPrefix(`/grafana`)
      traefik.http.routers.grafana.entrypoints: https,http
      traefik.http.routers.grafana.tls: true

  ############################
  # Internal services        #
  ############################

  # Business database
  database:
    image: bitnami/postgresql
    volumes:
      - database:/bitnami/postgresql
    ports:
      - "5432:5432"
    env_file:
      - database.env

  # Simple service example
  data:
    build: data
    image: ghcr.io/koeltv/data
    restart: on-failure
    labels:
      traefik.enable: true
      traefik.http.routers.data.entrypoints: https,http
      traefik.http.routers.data.tls: true
      traefik.http.routers.data.rule: PathPrefix(`/data`)
      traefik.http.routers.data.middlewares: cors@file,authentification@file,data
      traefik.http.middlewares.data.stripprefix.prefixes: /data
    depends_on:
      - database
    env_file:
      - keycloak-shared.env
      - database.env

  flight-plan:
    build: flight-plan
    image: ghcr.io/koeltv/flight-plan
    restart: on-failure
    labels:
      traefik.enable: true
      traefik.http.routers.flight-plan.entrypoints: https,http
      traefik.http.routers.flight-plan.tls: true
      traefik.http.routers.flight-plan.rule: PathPrefix(`/flight-plan`)
      traefik.http.routers.flight-plan.middlewares: cors@file,authentification@file,flight-plan
      traefik.http.middlewares.flight-plan.stripprefix.prefixes: /flight-plan
    depends_on:
      - database
    env_file:
      - keycloak-shared.env
      - database.env

  planning-tools:
    build: planning-tools
    image: ghcr.io/koeltv/planning-tools
    restart: on-failure
    labels:
      traefik.enable: true
      traefik.http.routers.planning-tools.entrypoints: https,http
      traefik.http.routers.planning-tools.tls: true
      traefik.http.routers.planning-tools.rule: PathPrefix(`/planning-tools`)
      traefik.http.routers.planning-tools.middlewares: cors@file,authentification@file,planning-tools
      traefik.http.middlewares.planning-tools.stripprefix.prefixes: /planning-tools
    depends_on:
      - database
    env_file:
      - keycloak-shared.env
      - database.env
      - api.env

  frontend:
    build: frontend
    image: ghcr.io/koeltv/frontend
    restart: on-failure
    labels:
      traefik.enable: true
      traefik.http.routers.frontend.entrypoints: https,http
      traefik.http.routers.frontend.tls: true
      traefik.http.routers.frontend.rule: Host(`pilothelper.com`) && PathPrefix(`/`)
      traefik.http.routers.frontend.priority: 1 # Lower priority to avoid conflicts

volumes:
  keycloak_database:
  database: