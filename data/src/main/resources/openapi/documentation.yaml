openapi: "3.0.3"
info:
  title: "PilotHelper Data API"
  description: "PilotHelper API for storing user-related data"
  version: "1.0.0"
servers:
  - url: "https://pilothelper.com/data"
paths:
  /:
    get:
      description: ""
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /aircraft:
    post:
      description: "Create aircraft"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Aircraft"
          application/xml:
            schema:
              $ref: "#/components/schemas/Aircraft"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: object
  /aircraft/{id}:
    delete:
      description: "Delete aircraft"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: "Read aircraft"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Aircraft"
            application/xml:
              schema:
                $ref: "#/components/schemas/Aircraft"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: "Update aircraft"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Aircraft"
          application/xml:
            schema:
              $ref: "#/components/schemas/Aircraft"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /aircraft/user:
    get:
      description: "Get Aircrafts from User"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Aircraft"
            'application/xml':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Aircraft"
        "400":
          description: "User is not logged in"
          content:
            '*/*':
              schema:
                type: "object"
components:
  schemas:
    Aircraft:
      type: "object"
      properties:
        aircraftId:
          type: "string"
        aircraftType:
          type: "string"
        turbulenceType:
          type: "string"
        equipment:
          type: "string"
        transponder:
          type: "string"
        colorAndMarkings:
          type: "string"
      required:
      - "aircraftId"
      - "aircraftType"
      - "turbulenceType"
      - "equipment"
      - "transponder"
      - "colorAndMarkings"