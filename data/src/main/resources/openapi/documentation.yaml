openapi: "3.1.0"
info:
  title: "PilotHelper API"
  description: "PilotHelper API"
  version: "1.0.0"
servers:
- url: "https://PilotHelper"
paths:
  /aircraft/user/{id}:
    get:
      description: "Get Aircraft from User"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Aircraft"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
  /aircrafts:
    post:
      description: "Create aircraft"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Aircraft"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Unit"
  /aircrafts/{id}:
    delete:
      description: "Delete aircraft"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: "Read aircraft"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Aircraft"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: "Update aircraft"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Aircraft"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /users:
    post:
      description: "Create user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExposedUser"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
  /users/{id}:
    delete:
      description: "Delete user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: "Read user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ExposedUser"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: "Update user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExposedUser"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /metrics:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
components:
  schemas:
    Aircraft:
      type: "object"
      properties:
        aircraftId:
          type: "string"
        aircraftType:
          type: "string"
        turbulenceType:
          type: "string"
        equipment:
          type: "string"
        transponder:
          type: "string"
      required:
      - "aircraftId"
      - "aircraftType"
      - "turbulenceType"
      - "equipment"
      - "transponder"
    Unit:
      type: "object"
      properties: {}
    ExposedUser:
      type: "object"
      properties:
        name:
          type: "string"
      required:
      - "name"
    Function1:
      type: "object"
      properties: {}
    Function1_? super HTML:
      type: "object"
    Map:
      type: "object"
      properties: {}
    Map_String:
      type: "string"